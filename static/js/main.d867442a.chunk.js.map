{"version":3,"sources":["components/Waypoint/dragIcon.svg","components/Waypoint/deleteIcon.svg","Redux/route/actionTypes.js","Redux/route/selectors.js","utils/reorderList.js","utils/deleteItemFromList.js","Redux/route/RouteReducer.js","store.js","utils/coordinates.js","components/GoogleMap/MapContext.js","components/GoogleMap/useGoogleMap.js","components/GoogleMap/Map.js","components/GoogleMap/Marker.js","components/GoogleMap/PolyLine.js","components/Map/Route.js","components/Map/Map.js","components/DraggableList/DraggableList.js","components/Waypoint/Waypoint.js","components/RouteControl/RouteControl.js","utils/createBLOB.js","components/GPX/elements.js","components/GPX/GPXRoute.js","components/GPX/renderGPX.js","components/Download/Download.js","components/Dashboard/Dashboard.js","App.js","index.js"],"names":["module","exports","ADD_COORDINATES","REORDER_COORDINATES","DELETE_COORDINATES","getRouteCoordinates","state","route","coordinates","reorderList","startIndex","endIndex","list","result","splice","removed","deleteItemFromList","id","filter","item","initialState","rootReducer","combineReducers","action","type","payload","source","destination","reduxDevtoolsEnhancer","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","serializeCoordinates","lat","lng","uniqueId","parseCoordinates","map","MapContext","React","createContext","useGoogleMap","onSuccess","useEffect","isSubscribed","loadGoogleMaps","key","process","then","api","catch","error","console","MapContainer","center","zoom","onClick","children","className","mapNode","useRef","contextStorage","useState","isLoading","setIsLoading","isMapReady","setIsMapReady","useCallback","googleAPI","current","mapInstance","Map","mapTypeId","addListener","e","latLng","event","clearListeners","ref","Provider","value","memo","position","iconStyle","labelOptions","useContext","GoogleMarker","Marker","title","label","text","color","icon","path","SymbolPath","CIRCLE","setMap","prevProps","nextProps","isEqual","PolyLine","polylineOptions","Polyline","getPath","forEach","coordinate","push","Route","useSelector","selectors","i","strokeWeight","scale","fillColor","fillOpacity","length","strokeColor","strokeOpacity","area51","dispatch","useDispatch","handleClick","actionTypes","polyLineOptions","DraggableList","items","onReorder","ListItem","listItem","onDragEnd","index","droppableId","providedDrop","snapshotDrop","droppableProps","innerRef","style","isDraggingOver","padding","width","boxSizing","draggableId","providedDrag","snapshotDrag","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","background","placeholder","defaultProps","Waypoint","onDelete","src","dragIcon","alt","tabIndex","role","deleteIcon","RouteControl","handleReorder","handleDelete","props","createBlob","string","Blob","GPX","createElement","RoutePoint","GPXRoute","version","creator","name","renderGPX","gpx","ReactDomServer","renderToStaticMarkup","Download","hasRoute","disabled","GPXString","saveAs","createBLOB","Dashboard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d867442a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dragIcon.62cd9b58.svg\";","module.exports = __webpack_public_path__ + \"static/media/deleteIcon.7cfdc2fe.svg\";","export const ADD_COORDINATES = 'ADD_COORDINATES';\nexport const REORDER_COORDINATES = 'REORDER_COORDINATES';\nexport const DELETE_COORDINATES = 'DELETE_COORDINATES';\n","export const getRouteCoordinates = state => state.route.coordinates;\n","const reorderList = (startIndex, endIndex, list) => {\n  const result = [...list];\n  const [removed] = result.splice(startIndex, 1); // eslint-disable-line fp/no-mutating-methods\n  result.splice(endIndex, 0, removed); // eslint-disable-line fp/no-mutating-methods\n  return result;\n};\n\nexport default reorderList;\n","const deleteItemFromList = (id, list) => list.filter(item => item.id !== id);\n\nexport default deleteItemFromList;\n","import {\n  ADD_COORDINATES,\n  REORDER_COORDINATES,\n  DELETE_COORDINATES,\n} from './actionTypes';\nimport reorderList from '../../utils/reorderList';\nimport deleteItemFromList from '../../utils/deleteItemFromList';\n\nconst initialState = {\n  coordinates: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_COORDINATES:\n      return {\n        ...state,\n        coordinates: [...state.coordinates, action.payload],\n      };\n    case REORDER_COORDINATES:\n      return {\n        ...state,\n        coordinates: reorderList(\n          action.payload.source,\n          action.payload.destination,\n          state.coordinates\n        ),\n      };\n    case DELETE_COORDINATES:\n      return {\n        ...state,\n        coordinates: deleteItemFromList(action.payload, state.coordinates),\n      };\n    default: {\n      return state;\n    }\n  }\n};\n","import {combineReducers, createStore} from 'redux';\nimport {RouteReducer} from './Redux/route';\n\nconst rootReducer = combineReducers({\n  route: RouteReducer,\n});\n\n/* eslint-disable no-underscore-dangle */\nconst reduxDevtoolsEnhancer =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n/* eslint-enable */\n\nconst store = createStore(rootReducer, reduxDevtoolsEnhancer);\n\nexport default store;\n","import {uniqueId} from 'lodash';\n\nexport const serializeCoordinates = ({lat, lng}) => ({\n  lat: lat(),\n  lng: lng(),\n  id: uniqueId('point-'),\n});\n\nexport const parseCoordinates = coordinates =>\n  coordinates.map(({lat, lng}) => ({\n    lat: () => lat,\n    lng: () => lng,\n  }));\n","import React from 'react';\n\nconst MapContext = React.createContext({});\n\nexport default MapContext;\n","import {useEffect} from 'react';\nimport loadGoogleMaps from 'load-google-maps-api';\n\nconst useGoogleMap = onSuccess => {\n  useEffect(() => {\n    let isSubscribed = true; // eslint-disable-line fp/no-let\n    loadGoogleMaps({\n      key: process.env.REACT_APP_GOOGLE_API_KEY,\n    })\n      .then(api => {\n        isSubscribed && onSuccess(api);\n      })\n      .catch(error => {\n        isSubscribed && console.error(error); // eslint-disable-line no-console\n      });\n    return () => {\n      isSubscribed = false; // eslint-disable-line fp/no-mutation\n    };\n  }, [onSuccess]);\n};\n\nexport default useGoogleMap;\n","import React, {useRef, useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport MapContext from './MapContext';\nimport useGoogleMap from './useGoogleMap';\n\nconst MapContainer = ({center, zoom, onClick, children, className}) => {\n  const mapNode = useRef();\n  const contextStorage = useRef();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isMapReady, setIsMapReady] = useState(false);\n  const onSuccess = useCallback(\n    googleAPI => {\n      const handleClick = e => {\n        onClick(e.latLng);\n      };\n      setIsLoading(false);\n      // eslint-disable-next-line fp/no-mutation\n      contextStorage.current = {\n        googleAPI,\n        mapInstance: new googleAPI.Map(mapNode.current, {\n          zoom,\n          center,\n          mapTypeId: 'terrain',\n        }),\n      };\n      contextStorage.current.mapInstance.addListener('click', handleClick);\n      setIsMapReady(true);\n      return () => {\n        // We can't destroy map instance, so we are just removing event listeners\n        contextStorage.current.googleAPI.event.clearListeners(\n          contextStorage.current.mapInstance,\n          'click'\n        );\n      };\n    },\n    [center, zoom, onClick]\n  );\n\n  useGoogleMap(onSuccess);\n\n  return isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    <div className={className} ref={mapNode}>\n      {isMapReady && (\n        <MapContext.Provider value={contextStorage.current}>\n          {children}\n        </MapContext.Provider>\n      )}\n    </div>\n  );\n};\n\nMapContainer.propTypes = {\n  center: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  }).isRequired,\n  polyLineOptions: PropTypes.shape({\n    strokeColor: PropTypes.string.isRequired,\n    strokeOpacity: PropTypes.number.isRequired,\n    strokeWeight: PropTypes.number.isRequired,\n  }).isRequired,\n  zoom: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  className: PropTypes.string.isRequired,\n};\n\nexport default MapContainer;\n","import React, {useContext, useEffect, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {isEqual} from 'lodash';\nimport MapContext from './MapContext';\n\nconst Marker = ({position, iconStyle, labelOptions}) => {\n  const {googleAPI, mapInstance} = useContext(MapContext);\n  useEffect(() => {\n    const GoogleMarker = new googleAPI.Marker({\n      position,\n      title: labelOptions.title,\n      map: mapInstance,\n      label: {text: labelOptions.label, color: labelOptions.color},\n      icon: {\n        path: googleAPI.SymbolPath.CIRCLE,\n        ...iconStyle,\n      },\n    });\n    return () => {\n      GoogleMarker.setMap(null);\n    };\n  }, [\n    googleAPI,\n    mapInstance,\n    position,\n    iconStyle,\n    labelOptions.title,\n    labelOptions.label,\n    labelOptions.color,\n  ]);\n\n  return <Fragment />;\n};\n\nMarker.propTypes = {\n  position: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  }).isRequired,\n  labelOptions: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n  }).isRequired,\n  iconStyle: PropTypes.shape({\n    strokeWeight: PropTypes.number,\n    scale: PropTypes.number,\n    fillColor: PropTypes.string,\n    fillOpacity: PropTypes.number,\n  }).isRequired,\n};\n\n// Protecting component from unnecessary rerenders since we are using objects as props\nexport default React.memo(Marker, (prevProps, nextProps) =>\n  isEqual(prevProps, nextProps)\n);\n","import React, {Fragment, useContext, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport MapContext from './MapContext';\n\nconst PolyLine = ({polylineOptions, coordinates}) => {\n  const {googleAPI, mapInstance} = useContext(MapContext);\n  useEffect(() => {\n    const Polyline = new googleAPI.Polyline(polylineOptions);\n    Polyline.setMap(mapInstance);\n    const path = Polyline.getPath();\n    coordinates.forEach(coordinate => {\n      path.push(coordinate); // eslint-disable-line fp/no-mutating-methods\n    });\n    return () => {\n      Polyline.setMap(null);\n    };\n  }, [googleAPI, mapInstance, coordinates, polylineOptions]);\n\n  return <Fragment />;\n};\n\nPolyLine.propTypes = {\n  polylineOptions: PropTypes.shape({\n    strokeColor: PropTypes.string.isRequired,\n    strokeOpacity: PropTypes.number.isRequired,\n    strokeWeight: PropTypes.number.isRequired,\n  }).isRequired,\n  coordinates: PropTypes.arrayOf(\n    PropTypes.shape({\n      lat: PropTypes.func.isRequired,\n      lng: PropTypes.func.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default PolyLine;\n","import React, {Fragment} from 'react';\nimport {useSelector} from 'react-redux';\nimport {selectors} from '../../Redux/route';\nimport {parseCoordinates} from '../../utils/coordinates';\nimport {PolyLine, Marker} from '../GoogleMap';\n\nconst Route = () => {\n  const coordinates = useSelector(selectors.getRouteCoordinates);\n  return (\n    <Fragment>\n      {coordinates.map((coordinate, i) => (\n        <Marker\n          labelOptions={{\n            color: 'white',\n            label: `${i + 1}`,\n            title: `Waypoint ${i + 1}`,\n          }}\n          position={coordinate}\n          key={coordinate.id}\n          iconStyle={{\n            strokeWeight: 0,\n            scale: 16,\n            fillColor: '#000',\n            fillOpacity: 1,\n          }}\n        />\n      ))}\n      {coordinates.length > 1 && (\n        <PolyLine\n          coordinates={parseCoordinates(coordinates)}\n          polylineOptions={{\n            strokeColor: '#1086E7',\n            strokeOpacity: 1.0,\n            strokeWeight: 5,\n          }}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Route;\n","import React, {useCallback} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {actionTypes} from '../../Redux/route';\nimport {serializeCoordinates} from '../../utils/coordinates';\nimport {GoogleMap} from '../GoogleMap';\nimport Route from './Route';\nimport './Map.scss';\n\nconst area51 = {\n  lat: 37.234332396,\n  lng: -115.80666344,\n};\n\nconst Map = () => {\n  const dispatch = useDispatch();\n  const handleClick = useCallback(\n    coordinates =>\n      dispatch({\n        type: actionTypes.ADD_COORDINATES,\n        payload: serializeCoordinates(coordinates),\n      }),\n    [dispatch]\n  );\n\n  return (\n    <div className=\"map\">\n      <GoogleMap\n        className=\"map-container\"\n        onClick={handleClick}\n        center={area51}\n        polyLineOptions={{\n          strokeColor: '#000000',\n          strokeOpacity: 1.0,\n          strokeWeight: 3,\n        }}\n        zoom={9}>\n        <Route />\n      </GoogleMap>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  userSelect: 'none',\n  padding: `${grid * 2} 0`,\n  margin: `0 0 ${grid}px 0`,\n  background: isDragging ? 'rgb(195, 228, 82)' : '', // change background colour if dragging\n  ...draggableStyle, // styles we need to apply on draggables\n});\n\nconst getListStyle = () => ({\n  padding: grid,\n  width: '100%',\n  boxSizing: 'border-box',\n});\n\nconst DraggableList = ({items, onReorder, listItem}) => {\n  const ListItem = listItem;\n  const onDragEnd = result => {\n    if (result.destination) {\n      onReorder(result.source.index, result.destination.index);\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"droppable\">\n        {(providedDrop, snapshotDrop) => (\n          <div\n            {...providedDrop.droppableProps}\n            ref={providedDrop.innerRef}\n            style={getListStyle(snapshotDrop.isDraggingOver)}>\n            {items.map((item, index) => (\n              <Draggable key={item.id} draggableId={item.id} index={index}>\n                {(providedDrag, snapshotDrag) => (\n                  <div\n                    ref={providedDrag.innerRef}\n                    {...providedDrag.draggableProps}\n                    {...providedDrag.dragHandleProps}\n                    style={getItemStyle(\n                      snapshotDrag.isDragging,\n                      providedDrag.draggableProps.style\n                    )}>\n                    <ListItem index={index} item={item} />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {providedDrop.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nDraggableList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  onReorder: PropTypes.func.isRequired,\n  listItem: PropTypes.elementType.isRequired,\n};\n\nDraggableList.defaultProps = {\n  items: [],\n};\n\nexport default DraggableList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dragIcon from './dragIcon.svg';\nimport deleteIcon from './deleteIcon.svg';\nimport './Waypoint.scss';\n\nconst Waypoint = ({index, item, onDelete}) => {\n  const handleClick = () => {\n    onDelete(item.id);\n  };\n  return (\n    <div className=\"waypoint\">\n      <div className=\"waypoint-dragHandle\">\n        <i className=\"waypoint-icon\">\n          <img src={dragIcon} alt=\"drag\" />\n        </i>\n      </div>\n      <div className=\"waypoint-name\">Waypoint {index + 1}</div>\n      <div className=\"waypoint-actions\">\n        <i\n          tabIndex={0}\n          role=\"button\"\n          className=\"waypoint-icon\"\n          onClick={handleClick}>\n          <img src={deleteIcon} alt=\"delete\" />\n        </i>\n      </div>\n    </div>\n  );\n};\n\nWaypoint.propTypes = {\n  index: PropTypes.number.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  item: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Waypoint;\n","import React, {useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {actionTypes, selectors} from '../../Redux/route';\nimport DraggableList from '../DraggableList';\nimport Waypoint from '../Waypoint';\nimport './RouteControl.scss';\n\nconst RouteControl = () => {\n  const coordinates = useSelector(selectors.getRouteCoordinates);\n  const dispatch = useDispatch();\n  const handleReorder = useCallback(\n    (source, destination) => {\n      dispatch({\n        type: actionTypes.REORDER_COORDINATES,\n        payload: {source, destination},\n      });\n    },\n    [dispatch]\n  );\n  const handleDelete = useCallback(\n    id => {\n      dispatch({\n        type: actionTypes.DELETE_COORDINATES,\n        payload: id,\n      });\n    },\n    [dispatch]\n  );\n  return (\n    <div className=\"route-control\">\n      <DraggableList\n        listItem={props => <Waypoint {...props} onDelete={handleDelete} />}\n        onReorder={handleReorder}\n        items={coordinates}\n      />\n    </div>\n  );\n};\n\nexport default RouteControl;\n","const createBlob = string =>\n  new Blob([string], {type: 'text/xml;charset=utf-8'});\n\nexport default createBlob;\n","import React from 'react';\n\nexport const GPX = props => React.createElement('gpx', props);\nexport const Route = props => React.createElement('rte', props);\nexport const RoutePoint = props => React.createElement('rtept', props);\nexport const Elevation = props => React.createElement('ele', props);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {GPX, Route, RoutePoint} from './elements';\n\nconst GPXRoute = ({coordinates}) => (\n  <GPX version=\"1.1\" creator=\"route-planner\">\n    <Route name=\"Your route\">\n      {coordinates.map(({lat, lng, id}) => (\n        <RoutePoint lat={lat} lng={lng} key={id} />\n      ))}\n    </Route>\n  </GPX>\n);\n\nGPXRoute.propTypes = {\n  coordinates: PropTypes.arrayOf(\n    PropTypes.shape({\n      lat: PropTypes.number.isRequired,\n      lng: PropTypes.number.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default GPXRoute;\n","import React from 'react';\nimport ReactDomServer from 'react-dom/server';\nimport GPXRoute from './GPXRoute';\n\nconst renderGPX = coordinates => {\n  const gpx = ReactDomServer.renderToStaticMarkup(\n    <GPXRoute coordinates={coordinates} />\n  );\n  return `<?xml version=\"1.0\"?>\\n${gpx}`;\n};\n\nexport default renderGPX;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {saveAs} from 'file-saver';\nimport {selectors} from '../../Redux/route';\nimport createBLOB from '../../utils/createBLOB';\nimport renderGPX from '../GPX';\nimport './Download.scss';\n\nconst Download = () => {\n  const coordinates = useSelector(selectors.getRouteCoordinates);\n  const hasRoute = coordinates.length !== 0;\n  const handleClick = () => {\n    if (hasRoute) {\n      const GPXString = renderGPX(coordinates);\n      saveAs(createBLOB(GPXString), 'route.gpx');\n    }\n  };\n  return (\n    <div>\n      <button\n        type=\"button\"\n        disabled={!hasRoute}\n        onClick={handleClick}\n        className=\"download-button\">\n        Download your Route\n      </button>\n    </div>\n  );\n};\n\nexport default Download;\n","import React from 'react';\nimport RouteControl from 'components/RouteControl';\nimport Download from 'components/Download';\nimport './Dashboard.scss';\n\nconst Dashboard = props => (\n  <div className=\"dashboard\">\n    <h3>Route Builder</h3>\n    <div className=\"routecontrol-wrapper\">\n      <RouteControl />\n    </div>\n    <div className=\"download-wrapper\">\n      <Download />\n    </div>\n  </div>\n);\n\nexport default Dashboard;\n","import React from 'react';\nimport Map from './components/Map';\nimport Dashboard from './components/Dashboard';\n\nconst App = () => (\n  <div className=\"App\">\n    <Dashboard />\n    <Map />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}